<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>首页</title>
        <description>首页 - </description>
        <link>http://Adominick.github.io</link>
        <link>http://Adominick.github.io</link>
        <lastBuildDate>2015-01-10T20:28:48+08:00</lastBuildDate>
        <pubDate>2015-01-10T20:28:48+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>使用Pandoc做些很酷的事</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;
&lt;code&gt;Pandoc&lt;/code&gt;使用Haskell语言编写，跨平台，可以转换几乎所有你能想到的文件格式，真的是转换神器。Haskell语言据说是一群高智商群体玩的东西，函数式编程语言的典范，而&lt;code&gt;Pandoc&lt;/code&gt;则是这门语言的优秀作&lt;!-- more --&gt;品之一。&lt;/p&gt;

&lt;p&gt;光说它由多强大不足以信服人，我们在终端输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc --help&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是开始显摆它的万能了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Input formats:  docbook, docx, epub, haddock, html, json, latex, markdown,
                markdown_github, markdown_mmd, markdown_phpextra,
                markdown_strict, mediawiki, native, opml, org, rst, t2t,
                textile, twiki
Output formats: asciidoc, beamer, context, docbook, docx, dokuwiki, dzslides,
                epub, epub3, fb2, haddock, html, html5, icml, json, latex, man,
                markdown, markdown_github, markdown_mmd, markdown_phpextra,
                markdown_strict, mediawiki, native, odt, opendocument, opml,
                org, pdf*, plain, revealjs, rst, rtf, s5, slideous, slidy,
                texinfo, textile
                [*for pdf output, use latex or beamer and -o FILENAME.pdf]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;t&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;本文目录&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#t1&quot;&gt;Pandoc的安装&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#t2&quot;&gt;Pandoc的配置&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#t3&quot;&gt;Pandoc的使用&lt;/a&gt;	&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-namet1a1-pandoc-&quot;&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;1. Pandoc 的安装&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Pandoc&lt;/code&gt;有两种安装方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;去网站&lt;a href=&quot;https://github.com/jgm/pandoc/releases/&quot;&gt;Releases · jgm/pandoc&lt;/a&gt;下载安装包&lt;/li&gt;
  &lt;li&gt;通过Haskell平台安装，此方式适合于想学习Haskell这门编程语言的人, 安装参考&lt;a href=&quot;http://www.yangzhiping.com/tech/pandoc.html&quot;&gt;http://www.yangzhiping.com/tech/pandoc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-namet2a2-pandoc&quot;&gt;&lt;a name=&quot;t2&quot;&gt;&lt;/a&gt;2. Pandoc的配置&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Pandoc&lt;/code&gt; 的一切命令可以在 shell 中完成，但是为了能够实时修改编辑的效果，我们需要和其他编辑器、软件搭配起来使用，下面给出一些建议&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作者用的是&lt;a href=&quot;https://github.com/textmate/textmate&quot;&gt;textmate&lt;/a&gt; + Marked 2&lt;/li&gt;
  &lt;li&gt;多数Pandoc用户使用的是&lt;a href=&quot;https://github.com/vim-pandoc/vim-pandoc&quot;&gt;vim-pandoc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Linux/windows 用户可以考虑使用&lt;a href=&quot;https://github.com/elerao/Smark&quot;&gt;Smark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-namet3a3-pandoc&quot;&gt;&lt;a name=&quot;t3&quot;&gt;&lt;/a&gt;3. Pandoc的使用&lt;/h2&gt;

&lt;h3 id=&quot;markdown-to-tex&quot;&gt;3.1 .markdown to .tex&lt;/h3&gt;
&lt;p&gt;学院工作者用来发文章用的最多的恐怕就是 Latex 了，Latex 可以排版出优美的数学公式，几乎是科学期刊和大型图书的标准规范。但是， 学习Latex并不像 Microsoft Word 那样所见即所得、容易上手。相信平时写些总结、report、博客 之类的都很难用 Latex，转而用语法比较简单地 markdown 和 Word。&lt;code&gt;Pandoc&lt;/code&gt; 就提供了一种把这效率和形式结合起来的可能性，你可以用 markdown 写文章，然后用&lt;code&gt;Pandoc&lt;/code&gt; 转换为.tex 和.docx 进行编辑，.markdown to .tex使公式排版可以依然使用 Latex 语言。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc -N --toc --latex-engine=xelatex --template=pmtemplate.latex input.md -o output.tex&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面对其中的命令分别说明下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-N&lt;/code&gt;:为每个章节加上编号&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--toc&lt;/code&gt;:增添目录&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--latex-engine=xelatex&lt;/code&gt;:用 XeLatex 编译&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--template=pmtemplate.latex&lt;/code&gt;:使用当前目录下地模板&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-o&lt;/code&gt;:后面紧接你要输出的文件名及类型
  点击下载&lt;a href=&quot;https://github.com/tzengyuxio/pages/tree/gh-pages/pandoc&quot;&gt;pmtemplate.latex&lt;/a&gt;模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pandoc-&quot;&gt;3.2 使用 Pandoc 做一些很酷的事&lt;/h3&gt;

&lt;p&gt;1.用 markdown 语言写 PPT 的提纲，然后输出 PPT 的 pdf 格式，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc --template=beamer-template.tex --latex-engine=xelatex -s -i -t beamer [SLIDES.md](http://johnmacfarlane.net/pandoc/demo/SLIDES) -o output.pdf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对上面命令行用到的参数进行说明&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-s&lt;/code&gt;:加上页眉、页尾&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: PPT 放映采用渐进式&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t beamer&lt;/code&gt;: 输出采用幻灯片样式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.用 markdown 语言写 PPT 的提纲，然后输出 PPT 的 Html 格式，并且有多种模板选择&lt;/p&gt;

&lt;p&gt;目前Pandoc包含了对五种HTML幻灯片框架的支持：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/paulrouget/dzslides&quot;&gt;dzslides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3.org/Talks/Tools/Slidy2/#(1)&quot;&gt;Slidy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meyerweb.com/eric/tools/s5/&quot;&gt;S5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://goessner.net/articles/slideous/slideous.html&quot;&gt;Slideous&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot;&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;S5、Slideous、reveal.js需要安装，安装过程可以参考&lt;a href=&quot;http://www.soimort.org/posts/165/&quot;&gt;http://www.soimort.org/posts/165/&lt;/a&gt;
下面直接把坐着常用的写下来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc -s --latexmathml --self-contained -i -t dzslides SLIDES.md -o SLIDESa.html
pandoc -s --latexmathml --self-contained -i -t slidy SLIDES.md -o SLIDESb.html
pandoc -s --latexmathml --self-contained -i -t revealjs SLIDES.md -o SLIDESc.html
pandoc -s --latexmathml --self-contained -i -t s5 SLIDES.md -o output.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点击查看文件效果&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demo/SLIDES&quot;&gt;SLIDES.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demo/example16a.html&quot;&gt;SLIDESa.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demo/example16b.html#(1)&quot;&gt;SLIDESb.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demo/example16d.html#/&quot;&gt;SLIDESc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：要使 Latex公式 编译成功，还需要去&lt;a href=&quot;http://math.etsu.edu/LaTeXMathML/&quot;&gt;A Brief Introduction to LaTeXMathML&lt;/a&gt;下载下面两个文档到当前文件夹，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://math.etsu.edu/LaTeXMathML/LaTeXMathML.js&quot;&gt;LaTeXMathML.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://math.etsu.edu/LaTeXMathML/LaTeXMathML.standardarticle.css&quot;&gt;LaTeXMathML.standardarticle.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并且在生成后的 html 文件写入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;LaTeXMathML.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;LaTeXMathML.standardarticle.css&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;有用的链接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pages.tzengyuxio.me/pandoc/&quot;&gt;Pandoc’s Markdown 語法中文翻譯&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demos.html&quot;&gt;Pandoc - Demos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;Pandoc - Pandoc User’s Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yangsan.github.io/tag/pandoc.html&quot;&gt;煎挠橙的blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.soimort.org/posts/165/&quot;&gt;Mort | Markdown+Pandoc→HTML幻灯片速成&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yangzhiping.com/tech/pandoc.html&quot;&gt;Markdown写作进阶：Pandoc入门浅谈 - 阳志平的网志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/13/pandoc/&quot;&gt;黑魔法利器pandoc - 雁起平沙的网络日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5ee56d450101dah2.html&quot;&gt;利用Pandoc将markdown文件转化为pdf_loongfee_新浪博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://higrid.net/c-art-pandoc.htm&quot;&gt;使用Pandoc转换markdown等文本文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://afoo.me/posts/2013-07-10-how-to-transform-chinese-pdf-with-pandoc.html&quot;&gt;pandoc中文pdf转换攻略&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/justjavac/justjavac.github.com/blob/master/_posts/jekyll/2012-03-31-markdown-syntax.md&quot;&gt;Markdown 语法说明 (简体中文版)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;
</description>
                <link>http://Adominick.github.io/%E6%95%88%E7%8E%87/pandoc</link>
                <guid>http://Adominick.github.io/%E6%95%88%E7%8E%87/pandoc</guid>
                <pubDate>2015-01-10T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>最简单方法翻墙修改hosts</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;此文用来记录免费翻墙中最简单的方法之一，修改 hosts。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是 hosts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;hosts文件是一个储存计算机&lt;!-- more --&gt;网络中各节点信息的计算机文件（文本文件）。它件负责将主机名映射到相应的IP地址。hosts文件通常用于补充或取代网络中DNS的功能。和DNS不同的是，计算机的用户可以直接对hosts文件进行控制。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请先退出所有杀毒软件&lt;/li&gt;
  &lt;li&gt;Windows XP 以上请使用管理员身份运行或赋予hosts文件可写权限&lt;/li&gt;
  &lt;li&gt;使用及更新: &lt;a href=&quot;http://freedom.txthinking.com/fuckGFW-64.exe&quot;&gt;fuckGFW-64.exe&lt;/a&gt;(64位) / &lt;a href=&quot;http://freedom.txthinking.com/fuckGFW-32.exe&quot;&gt;fuckGFW-32.exe&lt;/a&gt;(32位)双击运行&lt;/li&gt;
  &lt;li&gt;首次更新时会向hosts文件写入一行&lt;code&gt;#TX-HOSTS&lt;/code&gt;, 后续更新会以此行做判断, 请不要删除它&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;*nix/OSX 用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用及更新: 打开终端运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -s http://freedom.txthinking.com/fuckGFW.py | sudo python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果连接断断续续，请尝试 smartGoogle 项目&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo wget https://smarthosts.googlecode.com/svn/trunk/hosts -O /etc/hosts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OSX 用户请先用 Homebrew 安装 wget&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;必读技巧&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请使用国际版google. 防止google本地化重定向: 访问一下&lt;a href=&quot;https://www.google.com/ncr&quot;&gt;https://www.google.com/ncr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;请使用&lt;code&gt;https&lt;/code&gt;替代&lt;code&gt;http&lt;/code&gt;访问.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/txthinking/google-hosts&quot;&gt;有用的链接1&lt;/a&gt;
&lt;a href=&quot;https://code.google.com/p/smarthosts/wiki/installation&quot;&gt;有用的链接2&lt;/a&gt;
&lt;a href=&quot;https://code.google.com/p/openwrt-smarthosts-autoddvpn/&quot;&gt;有用的链接3&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/host</link>
                <guid>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/host</guid>
                <pubDate>2014-12-30T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>开放科学工具箱模版库</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;http://www.yangzhiping.com&quot; style=&quot;color:grey&quot;&gt;阳志平&lt;/a&gt;&lt;/em&gt;	
这篇文章总结了针对大多数科学网上已有的一些开放资源，这是不受你所在学校 IP 限制的一些网页，以及如何配合各种软件来整理这些资源，思路很清晰，值得借鉴。只是里面有些链接，对于具体专业领域可能不是那么使用，所以读者在阅读的时候最好能&lt;!-- more --&gt;有所取舍。以下摘自&lt;a href=&quot;http://www.yangzhiping.com&quot;&gt;阳志平的博客&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;模版使用说明&lt;/h2&gt;

&lt;p&gt;一些值得重视的整理规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不用试图穷尽以下所有问题，而只是整理自己有心得的问题以及学科特殊问题；&lt;/li&gt;
  &lt;li&gt;选择少比选择多好，不要尝试给出学科最多的选择，而是只推荐最佳实践；&lt;/li&gt;
  &lt;li&gt;如果学科牛人、牛刊太多了，那么top10是个较好的限制；&lt;/li&gt;
  &lt;li&gt;科学自身的进化会快于一切，所有模版库的问题仅仅是个参考，你可以更好地发挥；&lt;/li&gt;
  &lt;li&gt;如果可能，尽可能选择细分学科，比如自然语言处理就比计算机科学更值得整理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q1&quot;&gt;Q1：理解科学&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;假设穿越回到初中，作为完全外行，那时我是如何理解现在自己所在的这门科学？&lt;/li&gt;
  &lt;li&gt;如果我要利用穿越者优势，我会研究哪些学科问题？会如何研究？&lt;/li&gt;
  &lt;li&gt;这门科学吸引自己的初衷是什么？它真正要解决的大问题是什么？&lt;/li&gt;
  &lt;li&gt;我现在在离哪些初衷越来越远？做的事情是不是与大问题相关？或者有助于人类作为族群整体进化？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q2&quot;&gt;Q2：开放科学是什么&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;我所在学科，哪些做法阻碍了学科自身的发展？&lt;/li&gt;
  &lt;li&gt;我所在学科，&lt;a href=&quot;http://www.plos.org/wp-content/uploads/2011/05/Signers-List-111610.pdf&quot;&gt;哪些人&lt;/a&gt;或者哪些&lt;a href=&quot;http://www.open-access.net.cn/5f00653e83b753d6653f7b56/79d178147ba174064e0e8d4452a9673a67845f00653e83b753d6653f7b56/82f156fd/82f156fd60e05eb757fa91d14f1a-wellcome-trust-5f00653e83b753d6653f7b56&quot;&gt;基金&lt;/a&gt;在支持开放科学？&lt;/li&gt;
  &lt;li&gt;从自己学科角度写&lt;a href=&quot;http://en.wikipedia.org/wiki/Reinventing_Discovery:_The_New_Era_of_Networked_Science&quot;&gt;Reinventing_Discovery&lt;/a&gt;这本书读后感，并介绍给课题组&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q3-&quot;&gt;Q3: 如何获取高质量文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.doaj.org/&quot;&gt;DOAJ网站&lt;/a&gt;收集了所有学科的开放获取期刊，我的学科列表有哪些？哪些是高引用与发展潜力的？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://plos.org&quot;&gt;PLoS&lt;/a&gt;与&lt;a href=&quot;http://arxiv.org/&quot;&gt;arXiv&lt;/a&gt;等开放获取先锋论文库中，我所在学科，哪些属于高引用刊物或者牛人云集的刊物？&lt;/li&gt;
  &lt;li&gt;我所在学科，高质量的论文文献库是哪些？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://videolectures.net/&quot;&gt;videolectures&lt;/a&gt;中，有哪些我所在学科的精彩演讲，尤其是诺奖级别的？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.conferencealerts.com/&quot;&gt;conferencealerts&lt;/a&gt;：我所在学科哪些学术会议属于世界级别，值得订阅？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://slideshare.net/&quot;&gt;SlideShare&lt;/a&gt;：我所在学科，有哪些好的共享ppt作者？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fundingopps.cos.com/about/fundingopps.shtml&quot;&gt;COS&lt;/a&gt;：我所在学科，近些年基金申请反映出什么规律或者趋势？同时，有哪些基金对开放获取、开放科学的支持力度更大？&lt;/li&gt;
  &lt;li&gt;如何使用&lt;a href=&quot;http://scholar.google.com/&quot;&gt;Google Scholar&lt;/a&gt;
与&lt;a href=&quot;http://academic.research.microsoft.com/&quot;&gt;MAS&lt;/a&gt;导出、管理参考文献？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q4-&quot;&gt;Q4: 如何高效管理文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;我所在学科，存在哪些文献管理独特技巧或者文献二次评价秘诀&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mendeley.com&quot;&gt;mendeley&lt;/a&gt;、&lt;a href=&quot;http://www.citeulike.org/&quot;&gt;citeulike&lt;/a&gt;或者&lt;a href=&quot;http://www.zotero.org/&quot;&gt;Zotero&lt;/a&gt;，哪个更适合自己学科使用？&lt;/li&gt;
  &lt;li&gt;在&lt;a href=&quot;http://mendeley.com&quot;&gt;mendeley&lt;/a&gt;上，我所在学科，有哪些值得关注的小组？或者，我所在学科，有哪些世界级的文献阅读分享小组网站？国内豆瓣上，有哪些值得关注的学科兴趣小组？其中，读书很勤奋、很用功的豆瓣达人各自是哪些？&lt;/li&gt;
  &lt;li&gt;如何使用&lt;a href=&quot;http://www.endnote.com/&quot;&gt;EndNote&lt;/a&gt; 的&lt;strong&gt;Export Traveling Library&lt;/strong&gt;或者其他文献管理工具类似功能，从参考文献下载、参考文献阅读笔记、最终论文写作的所有历程都记录下来，最终共享给课题组或者整个互联网？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q5-&quot;&gt;Q5: 如何评价文献质量&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;我所在学科的权威奖项，尤其是奖励科学生涯早期的年轻科学家奖项是什么？他们的高引用论文阅读了吗？&lt;/li&gt;
  &lt;li&gt;未来二十年，这些年轻科学家里面，谁最有潜力？他们的论文、工作反映出来的学科本质创新规律是什么？我如何以5年前、5年后，对他们的工作的二次评估来调整自己的兴趣方向或者改善自己对学科创新本质规律的认识？&lt;/li&gt;
  &lt;li&gt;哪些杰出青年科学家最容易获得本学科的终身成就奖？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sciencewatch.com/&quot;&gt;sciencewatch&lt;/a&gt;网站的&lt;a href=&quot;http://sciencewatch.com/ana/st/about/&quot;&gt;Special Topics栏目&lt;/a&gt;与&lt;a href=&quot;http://sciencewatch.com/dr/nhp/&quot;&gt;Hot Papers&lt;/a&gt;栏目、&lt;a href=&quot;http://sciencewatch.com/dr/fbp/&quot;&gt;Fast Breaking Papers&lt;/a&gt;，反映学科近些年的热门或者突破进展论文，哪些是靠谱的，哪些是值得自己学习的？&lt;/li&gt;
  &lt;li&gt;本研究领域的平均引用率是多少，哪些科学家可以称之为合格，哪些可以称之为优秀？哪些可以称之为卓越（top）科学家？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.ucla.edu/~palsberg/h-number.html&quot;&gt;top科学家的H指数&lt;/a&gt;都是多少？他们的高引用论文前三名都是什么？反映了学科什么样的本质规律？&lt;/li&gt;
  &lt;li&gt;自身学科有哪些特殊的文献质量评价方法？它们的研究方法、研究对象、年份都有何规律？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q6-&quot;&gt;Q6: 如何获取并共享高质量数据&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;本学科有哪些靠谱的数据共享计划？我该如何参与？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zooniverse.org/&quot;&gt;zooniverse&lt;/a&gt;公民科学计划，我如何在自己所在学科发起？&lt;/li&gt;
  &lt;li&gt;我所在学科，有哪些稳定更新的第三方开放数据源？&lt;/li&gt;
  &lt;li&gt;设计众包或者在线实验、数据采集，我所在学科已经出版了哪些好书，有何伦理、技术注意事项？以及最佳实践或者开源工具？&lt;/li&gt;
  &lt;li&gt;如何在自己实验室或者所在机构推广&lt;a href=&quot;https://github.com/twitter/innovators-patent-agreement&quot;&gt;创新者专利协议&lt;/a&gt;？&lt;/li&gt;
  &lt;li&gt;如何以&lt;a href=&quot;http://opendatacommons.org/&quot;&gt;开放数据协议&lt;/a&gt;将自己的数据面向全世界研究者发布？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://creativecommons.net.cn/&quot;&gt;知识共享协议&lt;/a&gt;如何使用？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q7-&quot;&gt;Q7: 如何输出开放科学成果&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;APA格式或者哪种格式，应作为所在学科重点推广？&lt;/li&gt;
  &lt;li&gt;相应文献管理软件如何使用？&lt;/li&gt;
  &lt;li&gt;我所在学科，有哪些论文美文？值得作为提升写作品味，反复阅读？&lt;/li&gt;
  &lt;li&gt;如何摆脱word的束缚，开始尝试性到真正习惯使用LaTex或者Markdown等格式？&lt;/li&gt;
  &lt;li&gt;LaTex或者Markdown等格式，如何与文献管理软件搭配？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;上有哪些我所在学科的开源软件？&lt;/li&gt;
  &lt;li&gt;我所在学科，有哪些著名开源软件？我该如何参与？&lt;/li&gt;
  &lt;li&gt;开源硬件对自己的项目有什么启发？&lt;/li&gt;
  &lt;li&gt;如何在自己家乡、机构所在社区、周边学校开展公民科学活动或者做一些讲座？&lt;/li&gt;
  &lt;li&gt;类似于&lt;a href=&quot;http://maotouying.net/&quot;&gt;猫头鹰实验室&lt;/a&gt;这样的活动，我可以搞起来吗？&lt;/li&gt;
  &lt;li&gt;有哪些基金特别支持类似开放科学的ngo活动？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q8&quot;&gt;Q8：如何以开放学习的方式学习科学&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;学科哪些牛人在&lt;a href=&quot;http://www.ted.com/&quot;&gt;TED&lt;/a&gt;上做过演讲？哪些跨学科的演讲对自己有启发？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://itunes.stanford.edu/&quot;&gt;斯坦福开放大学&lt;/a&gt;、&lt;a href=&quot;http://ocw.mit.edu/courses/&quot;&gt;MIT开放课程&lt;/a&gt;、&lt;a href=&quot;http://videolectures.net/&quot;&gt;videolectures&lt;/a&gt;、&lt;a href=&quot;https://www.coursera.org/&quot;&gt;coursera&lt;/a&gt;与 &lt;a href=&quot;http://www.youtube.com/&quot;&gt;YouTube&lt;/a&gt;: 与自己所在学科最相关的学习教程是哪些？&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackexchange.com/sites&quot;&gt;stackexchange&lt;/a&gt;：自己如何积分与投入关注？哪些是高质量问题？&lt;/li&gt;
  &lt;li&gt;如何通过&lt;a href=&quot;http://openstudy.com&quot;&gt;openstduy&lt;/a&gt;学习？&lt;/li&gt;
  &lt;li&gt;学科已经公开的一些能够提升大众思维水准的科学传播项目有哪些？&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/openscience</link>
                <guid>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/openscience</guid>
                <pubDate>2014-12-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Mac下GoAgent安装教程</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;
如果您之前安装过 GoAgent，而突然间又无法使用了，先从以下方法解决问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;确保下载的是最新版&lt;a href=&quot;https://github.com/goagent/goagent&quot;&gt;GoAgent&lt;/a&gt;上传到GAE。&lt;/li&gt;
  &lt;li&gt;下载&lt;a href=&quot;http://pan.baidu.com/s/1eQlGh4Q&quot;&gt;iplist.txt&lt;/a&gt;文件，替换 PC 端 GoAgent/local文件夹中&lt;!-- more --&gt;配置文件proxy.ini对应的&lt;code&gt;[iplist]&lt;/code&gt;内容&lt;/li&gt;
  &lt;li&gt;关闭proxy.ini，重启GoAgent&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果您遇到如下问题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GoAgent Starting…WARNING - [Mar 22 20:05:54] Load Crypto.Cipher.ARC4 Failed, Use Pure Python Instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则可以在终端输入&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
sudo easy_install pycrypto
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;如果返回信息为&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Address already used&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则可以在终端输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;top

PID   COMMAND      %CPU TIME     #TH  #WQ  #PORT MEM    PURG   CMPRS  PGRP PPID
5691  top          2.3  00:00.42 1/1  0    19    2376K  0B     0B     5691 5627
5627  bash         0.0  00:00.09 1    0    15    2404K  0B     0B     5627 5626
5626  login        0.0  00:00.01 2    0    26    1148K  0B     0B     5626 675
5623  GoAgentMac   0.0  00:00.28 3    0    150   8052K  8192B  0B     5623 1
5621  quicklookd   0.0  00:00.13 4    0    80    3888K  0B     0B     5621 1
5404  Google Chrom 0.1  00:04.31 12   0    124   27M    12K    0B     5387 5387
5402  Google Chrom 0.0  00:00.48 12   0    122   15M    0B     0B     5387 5387
5401  Google Chrom 0.0  00:00.91 12   0    124   25M    0B     0B     5387 5387
5400  Google Chrom 0.0  00:00.57 12   0    122   19M    0B     0B     5387 5387
5399  Google Chrom 0.0  00:01.82 11   0    121   39M    4096B  0B     5387 5387
5398  Google Chrom 0.0  00:00.80 12   0    123   23M    4096B  0B     5387 5387
5397  Google Chrom 0.0  00:01.29 12   0    123   33M    8192B  0B     5387 5387
5396  Google Chrom 0.0  00:00.49 11   0    121   15M    0B     0B     5387 5387
5394  Google Chrom 1.3  00:06.72 12   0    122   22M+   0B     0B     5387 5387
5391  Google Chrom 0.0  00:07.47 4    0    74    26M    0B     0B     5387 5387
5387  Google Chrom 2.8  00:39.27 40   0    508   86M    1140K  0B     5387 1
5372  com.apple.hi 0.0  00:00.01 2    0    29    916K   0B     0B     5372 1
5370  CVMCompiler  0.0  00:00.62 2    1    31    19M    20K    0B     5370 1
5368  TextEdit     0.0  00:07.84 3    0    229   12M    8192B  0B     5368 1
5312  mdworker     0.0  00:00.03 3    0    41    1412K  0B     4096B  5312 1
5297  Python       0.0  00:06.23 12   0    36    18M    0B     12K    5297 5293
5293  bash         0.0  00:00.02 1    0    15    648K   0B     0B     5293 5292
5292  sudo         0.0  00:00.03 2    0    27    1088K  0B     12K    5292 1
5281  systemstats  0.0  00:01.30 2    1    34    6300K  0B     4096B  5281 1
5254  CoreServices 0.0  00:00.46 3    0    180   7472K  0B     1432K  5254 1
4221  ocspd        0.0  00:00.96 4    0    69    2268K  0B     912K   4221 1
4025  CloudKeychai 0.0  00:00.03 2    0    43    700K   0B     180K   4025 1
4021  DataDetector 0.0  00:00.04 2    0    48    440K   0B     924K   4021 1
4017  recentsd     0.0  00:00.33 2    0    98    1948K  0B     3992K  4017 1
3831  ScopedBookma 0.0  00:00.10 3    2    34    1168K  0B     340K   3831 1
3817  suhelperd    0.0  00:00.03 2    0    34    16K    0B     1588K  3817 1

sudo kill 5297 # PID 5297 python process
&lt;/code&gt;&lt;/pre&gt;

</description>
                <link>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/goagent</link>
                <guid>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/goagent</guid>
                <pubDate>2014-12-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>matlab文件读取</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;		
由于现在各种实验仪器都可以记录实验过程中产生的数据，而这些数据有可能具有不同的格式，当数据量很庞大的时候，我们就需要用像 Matlab、Python、Fortran 等的程序处理数据，本文将讲解 Matlab 的一些读写数据的&lt;!-- more --&gt;常用命令。&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;t&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;本文目录    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#t1&quot;&gt;load,save&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#t2&quot;&gt; textread,textscan&lt;/a&gt;   &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#t3&quot;&gt; 具体事例分析&lt;/a&gt;    &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-namet1a1-loadsave&quot;&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;1. load,save&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;load&lt;/code&gt;是将文本中变量导入工作空间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load(&#39;gong.mat&#39;) %只导入文件到工作空间
load gong.mat    %同时导入变量
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;whos&lt;/code&gt;可以用来查看工作空间变量大小和类型。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save&lt;/code&gt;命令的使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;save pqfile.txt p q -ascii
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASCII码是我们读得懂的格式，二进制就是那种只含有“0”、“1”的存储方式。通常，文本流用来读写标准的文本文件，或者将字符输出到屏幕或打印机，或者接受键盘的输入；而二进制流用来读写二进制文件(例如图形或字处理文档)，或者读取鼠标输入，或者读写调制解调器。如果用文本方式打开二进制文件，会把“0D   0A”自动变换成“\n”来存在内存中。写入的时候反向处理。而二进制方式打开的话，就不会有这个过程。但是，Unicode/UTF/UCS格式的文件，必须用二进制方式打开和读写。&lt;/p&gt;

&lt;p&gt;将这个是为了知道matlab什么时候改用什么存储方式。在 matlab 中存储成为二进制还是文本文件取决于fopen的方式，如果用wt，则存储为文本文件，这样用记事本打开就可以正常显示了；如果用w则存储为二进制文件，这样用记事本打开会出现小黑方块，要正常显示的话，可以用写字板或UltraEdit等工具打开。&lt;/p&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-namet2a2-textreadtextscan&quot;&gt;&lt;a name=&quot;t2&quot;&gt;&lt;/a&gt;2. textread,textscan&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;textread&lt;/code&gt;是从文本文件读取数据，然后按照你的读取方式输出数据。这条命令对于已知数据格式文件的读取较为方便&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mydata.dat&lt;/code&gt;文件的第一行是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sally	  Levell 12.34 45 Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则在可以用&lt;code&gt;textread&lt;/code&gt;阅读文件第一行，并忽略浮点值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[names, types, y, answer] = textread(&#39;mydata.dat&#39;, ...
&#39;%9c %6s %*f %2d %3s&#39;, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;matlab 返回的数值为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;names =
	Sally    
types = 
	&#39;Level1&#39;
y =
	45
answer = 
    &#39;Yes&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 text 编辑器创建一个名为&lt;code&gt;grades.txt&lt;/code&gt;文件，内容为：&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;Student_ID  | Test1  | Test2  | Test3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;   1           91.5     89.2     77.3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;   2           88.0     67.8     91.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;   3           76.3     78.1     92.5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;   4           96.4     81.2     84.6&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;用4次&lt;code&gt;&#39;%s&#39;&lt;/code&gt;格式读取每列开头&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fileID = fopen(&#39;grades.txt&#39;);

formatSpec = &#39;%s&#39;;
N = 4;
C_text = textscan(fileID,formatSpec,N,&#39;Delimiter&#39;,&#39;|&#39;); %以“|”为分隔号读取&#39;%s&#39;4次
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再读取文件里数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C_data0 = textscan(fileID,&#39;%d %f %f %f&#39;)
C_data0 = 
  [4x1 int32]    [4x1 double]    [4x1 double]    [4x1 double]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后记得一定要关闭文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fclose(fileID);
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-namet3a3-&quot;&gt;&lt;a name=&quot;t3&quot;&gt;&lt;/a&gt;3. 具体事例分析&lt;/h2&gt;

&lt;p&gt;以下事例源自&lt;a href=&quot;http://www.matlabsky.com/thread-10308-1-1.html&quot;&gt;http://www.matlabsky.com/thread-10308-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.纯数据（列数相同）：
源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 3866.162 2198.938 141.140
1 3741.139 2208.475 141.252
2 3866.200 2198.936 141.156
3 3678.048 2199.191 141.230
4 3685.453 2213.726 141.261
5 3728.769 2212.433 141.277
6 3738.785 2214.381 141.256
7 3728.759 2214.261 141.228
8 3748.886 2214.299 141.243
9 3748.935 2212.417 141.253
10 3733.612 2226.653 141.236
11 3733.583 2229.248 141.223
12 3729.229 2229.118 141.186
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：对于这个txt文件，由于各行列数相同，故简单地使用load,importdata均可。&lt;/p&gt;

&lt;p&gt;2.字段名（中、英文字段均可）+数据：
源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CH0 CH1 CH2 CH3
0.000123 0.000325 0.000378 0.000598
0.000986 0.000256 0.000245 0.000698
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：由于是记录的形式，因此各行列数必相同（缺少部分列时请自行在文件中补上 Inf 或 NaN），故直接使用 importdata 便可。&lt;/p&gt;

&lt;p&gt;3.注释（含有独立的数字串）+数据（列数相同）：
问题：这个文件有4列,但前6行是文字说明,4列数字是从第8行开始的.现在我想把这个文件的前2列和文字说明提出来组成一个新的dat文件&lt;/p&gt;

&lt;p&gt;源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Group 2  12.02.2006   Limei
Samples of datas: 50000

CH0  CH1  CH2  CH3
0.000123  0.000325   0.000378   0.000598
0.000986  0.000256   0.000245   0.000698
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目标文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Group 2 12.02.2006 Limei
Samples of datas: 50000

CH0 CH1
0.000123 0.000325
0.000986 0.000256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：由于注释中含有独立的数字串，且注释部分没有明显的格式，这时候用importdata, load等高级命令直接读取会失败，用 textread, dlmwrite 等格式化命令也不太合适，因此只能使用低级命令进行读取。（当然了，可以跳过注释部分直接用高级命令读取数据，即：[a b c d] = textread(filename,’%f %f %f %f’,’headerlines’,4); ）。一个简单的、非通用的包含注释的读取方法如下：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clc;clear;
fid = fopen(&#39;exp.txt&#39;, &#39;r&#39;);
fid_n=fopen(&#39;ex.dat&#39;,&#39;w&#39;);
while ~feof(fid)
    tline=fgetl(fid);
    if ~isempty(tline)
        if double(tline(1))&amp;gt;=48 &amp;amp;&amp;amp; double(tline(1))&amp;lt;=57  %数值开始
            a=strread(tline);
            a(3:4)=[];
            fprintf(fid_n,&#39;%f %f\n&#39;,a);
            clear a;
        elseif double(tline(1))==67   %字母C开始
           [b1,b2,b3,b4]=strread(tline,&#39;%s %s %s %s&#39;);
           b=[b1{1},&#39;  &#39;,b2{1}];
            fprintf(fid_n,&#39;%s\n&#39;,b);
            clear b b1 b2 b3 b4;
        else
            fprintf(fid_n,&#39;%s\n&#39;,tline);
        end
    else
        fprintf(fid_n,&#39;%s\n&#39;,tline);
    end
end
fclose(fid);
fclose(fid_n);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.注释（不含独立的数字串）+数据（列数相同）：
源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;你好 abc
欢迎来到 我们
vib.hit.edu.cn
1 11 111 1111
2 22 222 2222
3 33 333 3333
4 44 444 4444
5 55 555 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：直接用 importdata 便可&lt;/p&gt;

&lt;p&gt;注：有时候注释中含有独立的数字串也可以 importdata 成功，不过得到的结果有可能不正确，建议这时候使用第3种情形的读取方式。&lt;/p&gt;

&lt;p&gt;5.注释与数据混排：
对此当然只能自己编程，举例：&lt;/p&gt;

&lt;p&gt;源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 11 111 1111
你好
2 22 222 2222
欢迎来到
3 33 333 3333
4 44 444 4444
vib.hit.edu.cn
5 55 555 5555
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function [data]=distilldata(infile)
%功能说明：
%将保存数据的原始文件中的数值数据读入到一个data变量中
%使用说明：
% infile——原始数据文件名;
% data=数据变量

tmpfile=&#39;tmp2.mat&#39;;

fidin=fopen(infile,&#39;r&#39;); % 打开原始数据文件（.list）

fidtmp=fopen(tmpfile,&#39;w&#39;); % 创建保存数据文件（不含说明文字）

while ~feof(fidin) % 判断是否为文件末尾
  tline=fgetl(fidin); % 从文件读入一行文本（不含回车键）
  if ~isempty(tline) % 判断是否空行
    [m,n]=size(tline);
    flag=1;
    for i=1:n %判断一行中有没有字符（＋－.Ee和空格键除外）
      if ~(tline(i)==&#39; &#39;|tline(i)==&#39;-&#39;|tline(i)==&#39;.&#39;|tline(i)==&#39;E&#39;...
          |tline(i)==&#39;e&#39;|tline(i)==&#39;+&#39;...
          |(double(tline(i))&amp;gt;=48&amp;amp;&amp;amp;double(tline(i))&amp;lt;=57))
        flag=0;
        break;
      end
    end
    if flag==1 % 如果是数字行，把此行数据写入文件
      fprintf(fidtmp,&#39;%s\n&#39;,tline);
    end
  end
end

fclose(fidin);

fclose(fidtmp);

data=textread(tmpfile);

delete(tmpfile);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;另外，如果要求不高，也可以使用 textread 函数跳过注释部分进行读取，不过前提是需要事先知道文件内容的结构（即哪行是数据、哪行是注释）&lt;/p&gt;

&lt;p&gt;6.各列数据的分离：
源文件：&lt;/p&gt;

&lt;p&gt;CODE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;           0 +  47038.7   1.05  09:26:07  C
           2 +  46477.7   1.03  09:28:38  C  
           4 +  44865.7   1.04  09:28:48  C  
           6 +  41786.4   1.03  09:28:56  C  
           8 +  39896.0   0.97  09:29:03  C  
          10 +  37518.4   0.93  09:29:15  C  
          12 +  35858.5   0.92  09:29:30  C  
          14 +  46105.0   1.03  09:30:21  C  
          16 +  46168.6   6.89  09:30:30  C  
          18 +  48672.3   4.33  09:30:40  C  
          20 +  49565.7   0.49  09:30:48  C  
          22 +  49580.7   0.53  09:30:55  C  
          24 +  49602.3   0.84  09:31:03  C  
          26 +  49582.5   1.51  09:31:11  C  
          28 +  49577.0   1.39  09:31:19  C  
          30 +  49589.3   0.61  09:31:27  C  
          32 +  49578.3   1.06  09:31:29  C  
          34 +  49512.5   1.77  09:31:38  C 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解答：直接用 [a,b,c,d,e,f]=textread(yourfilename,’%d %c %f %f %s %c’); 便可&lt;/p&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;
</description>
                <link>http://Adominick.github.io/%E7%A7%91%E7%A0%94%E7%AC%94%E8%AE%B0/matlab</link>
                <guid>http://Adominick.github.io/%E7%A7%91%E7%A0%94%E7%AC%94%E8%AE%B0/matlab</guid>
                <pubDate>2014-12-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Mac OS 用指定程序打开文件</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;
Mac 下我一般都是用 bash 创建 markdown 文件，然后再用 Mou 程序编辑的，用 Mou 程序的好处在于可以实时看到编辑后的文本效果。于是就想再 bash 中直接用 Mou 打开刚刚建立的文件，查 help 文档&lt;!-- more --&gt;信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open: unrecognized option &#39;--help&#39;
Usage: open [-e] [-t] [-f] [-W] [-R] [-n] [-g] [-h] [-b &amp;lt;bundle identifier&amp;gt;] [-a &amp;lt;application&amp;gt;] [filenames] [--args arguments]
Help: Open opens files from a shell.
  By default, opens each file using the default application for that file.  
  If the file is in the form of a URL, the file will be opened as a URL.
Options: 
  	-a                Opens with the specified 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到其中的&lt;code&gt;open [-a &amp;lt;application&amp;gt;] [filenames] [--args arguments]&lt;/code&gt;，及命令行说明&lt;code&gt;Help: Open opens files from a shell.&lt;/code&gt;，所以如果我再 bash 中要用 Mou 打开&lt;code&gt;.md&lt;/code&gt;的文件就应该在 shell 中输入&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;open -a mou filename.md&lt;/p&gt;
&lt;/blockquote&gt;

</description>
                <link>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/mac-os-</link>
                <guid>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/mac-os-</guid>
                <pubDate>2014-12-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>用 github + jekyll-bootstrap 搭建个人 blog</title>
                <description>
&lt;p&gt;&lt;em&gt;文/&lt;a href=&quot;/zcontact.html&quot; style=&quot;color:grey&quot;&gt;甄谨言&lt;/a&gt;&lt;/em&gt;
本文笔记本配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统：OS X Yosemite version 10.10.1&lt;/li&gt;
  &lt;li&gt;处理器：2.8 GHz Intel Core i7&lt;/li&gt;
  &lt;li&gt;内存：4 GB 1333 MHz DDR3&lt;/li&gt;
  &lt;li&gt;显卡：Intel HD Graphics 3000 384 MB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是博客的第一篇文章，我想趁自己还记得一些细节的情况下，把我搭建个人空间的步骤记录下来，过程中阅读了不少网络资料，我将把这些&lt;!-- more --&gt;资料链接放到文章中供大家学习参考。如果有什么建议和好的 idea，欢迎在文章末尾留言^_^&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;t&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;本文目录    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#t1&quot;&gt; Why github+jekyll ?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#t2&quot;&gt; 申请 Github 账号&lt;/a&gt;   &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#t3&quot;&gt; 安装 Jekyll&lt;/a&gt;    &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#t4&quot;&gt; 建立自己的 blog&lt;/a&gt;    &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-namet1a1-why-githubjekyll-&quot;&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;1. Why github+jekyll ?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;「 GitHub是一个用于使用Git版本控制系统的项目的基于互联网的存取服务。它是由GitHub公司（先前被称作用Logical Awesome）的开发者Chris Wanstrath, PJ Hyett, 和 Tom Preston-Werner 使用Ruby on Rails写成的。GitHub同时提供商业账户和为开源项目提供的免费账户。根据在2009年的Git用户调查，GitHub是最流行的Git存取站点。
它提供了像 feeds，followers 和显示开发者们怎样在他们的版本库的版本上工作的网络图表。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;—— 源自&lt;a href=&quot;http://blog.csdn.net&quot;&gt;Reactor1379的博客&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「 GitHub十分“给力”，不仅为程序员提供了免费源代码托管空间，还为程序员提供了一个社交平台，允许大家在GitHub上创建自己的博客网站或主页（github pages），而且免费，不限流量，还可以绑定自己的域名。不过遗憾的是，GitHub提供的主页实际上是基于GitHub的源代码实现的，所以只支持上传静态的网页，不能在上面创建真正的博客系统。不过，不幸中的万幸是，GitHub支持一种叫jekyll的静态页面转换引擎，也就是说只要上传符合jekyll规范的文件，GitHub会用这种模板引擎为你转化静态页面和网站。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;—— 源自&lt;a href=&quot;http://www.pchou.info&quot;&gt;P_Chou的博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这两段引文很清楚地表达了 Github 的特点，以及为什么我们要用 jekyll 转换引擎。程序猿可以通过 Github 来相互关注、交流，你可以在 Github 上把我的代码拷贝到你的 repository 里进行编辑使用，同时在我这边也可以看到你的修改，然后确定我是不是要采用你的方案，这给程序猿提供了便利。如果你拥有 Github 账户，并且想关注我地动态，欢迎点击下面的[Add me]按钮(在弹出的新页面里点击“Follow”即可)。接下来就直接讲解搭建博客流程。&lt;/p&gt;

&lt;form action=&quot;https://github.com/Adominick&quot; align=&quot;left&quot; target=&quot;_blank&quot;&gt;
    &lt;input class=&quot;btn&quot; type=&quot;submit&quot; value=&quot;Add me&quot; /&gt;
&lt;/form&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-namet2a2--github-&quot;&gt;&lt;a name=&quot;t2&quot;&gt;&lt;/a&gt;2. 申请 Github 空间&lt;/h2&gt;

&lt;h3 id=&quot;github-&quot;&gt;2.1 在 Github 空间生成网页&lt;/h3&gt;

&lt;p&gt;进入 github, 点击右边中间的绿色按钮 new repository，然后可以看到下面的界面，repository name 填写你自己的 username.github.io（注意注意大小写一定要与你注册的用户名一致 这样才能保证浏览器输入username.github.io时直接访问你的博客）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/githubjekyll.png&quot; height=&quot;400&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入你刚刚创建的new repository界面，点击右边的“setting”进入设置页，找到“github page”栏目，点击“Automatic page generator”，随便选择一个 layout，因为最后会删掉的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/githubpage.png&quot; height=&quot;150&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github--1&quot;&gt;2.2 从 Github 空间配置到本地&lt;/h3&gt;

&lt;p&gt;我申请的主页为&lt;code&gt;Adominick.github.io&lt;/code&gt;，即我的用户名叫 Adominick，我这里的示范是在 MAC 端，所用的 shell 是 bash，先将将当前目录 cd 到你想要clone 到的文件夹下，然后跟着我输入如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/Adominck/Adominick.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后会在当前文件夹下生成一个命名为“Adominick.github.io”的文件夹，里面是你在 Github 空间生成的网页，之后我们就不需要管它了.&lt;/p&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-namet3a3--jekyll&quot;&gt;&lt;a name=&quot;t3&quot;&gt;&lt;/a&gt;3. 安装 Jekyll&lt;/h2&gt;

&lt;p&gt;配置 jekyll 的时候，稍稍会麻烦点。先要安装 gem，确保 gem 是最新版的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完 gem 之后，我们就可以用 gem 命令来 install jekyll 了，由于 GFW 的原因，我们需要改一下 gem 中的 source：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用&lt;code&gt;gem sources -l&lt;/code&gt;查看现在的源列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*** CURRENT SOURCES ***
http://ruby.taobao.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后我们可以安装 jekyll 了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。Jekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rdiscount kramdown
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-namet4a4-jekyll-bootstrap-blog&quot;&gt;&lt;a name=&quot;t4&quot;&gt;&lt;/a&gt;4. 用jekyll-bootstrap建立自己的 blog&lt;/h2&gt;

&lt;p&gt;接着去&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;jekyll-bootstrap&lt;/a&gt;网站找到自己喜欢的模板，clone 到你想要的文件夹下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后删除 jekyll-bootstrap 的 git 信息&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd jekyll-bootstrap
rm -rf ./.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把 jekyll-bootstrap 里面的内容全都拷贝到 Adominick.github.io 文件夹里。&lt;/p&gt;

&lt;p&gt;最后在本地修改你的网页，并且实时用 jekyll 查看到满意为止，上传到 Github 空间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot;&gt;&lt;a href=&quot;#t&quot;&gt;返回目录&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;注意事项：&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;站点信息配置&lt;/h3&gt;

&lt;p&gt;编辑&lt;code&gt;_config.yml&lt;/code&gt;，&lt;code&gt;title&lt;/code&gt;填上博客名字，个人信息往后填即可，不需要的注释掉。&lt;code&gt;production_url :&lt;/code&gt;后的链接改成&lt;code&gt;http://uaername.github.io&lt;/code&gt;;&lt;code&gt;comments :&lt;/code&gt;是评论功能设置，&lt;code&gt;provider : disqus&lt;/code&gt;，&lt;code&gt;short name&lt;/code&gt;设置为用户名，这个需要稍后去disqus注册,如果不需要用 disqus 的功能，可以把 comments 注释掉;&lt;code&gt;analytics:&lt;/code&gt;是网站运行情况分析，选google的就可以，&lt;code&gt;tracking_id&lt;/code&gt;要换成在&lt;a href=&quot;http://www.google.com/analytics&quot;&gt;Google Analytics&lt;/a&gt;注册后给出的。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;可供参考学习的链接&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs&quot;&gt;jekyll文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&quot;&gt;jekyll quick start&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://realasking.github.io/&quot;&gt;realasking的博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/114888&quot;&gt;图灵社区的一篇文章&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.javachen.com/&quot;&gt;JavaChen’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://theloverz.me/&quot;&gt;theloverz’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://erjjones.github.io/&quot;&gt;erjjones’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pchou.info/&quot;&gt;pchou’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/building-static-sites-with-jekyll--net-22211&quot;&gt;Building Static Sites with Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;雁起平沙的网络日志&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.yangzhiping.com/&quot;&gt;阳志平的博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.skydark.info/&quot;&gt;skydark’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.liulantao.com/&quot;&gt;刘兰涛的技术博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://havee.me/&quot;&gt;Havee’s Space&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yanjunyi.com/&quot;&gt;MythArcher Yan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://truongtx.me/&quot;&gt;Truongtx’s Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://liberize.me/&quot;&gt;liberize’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://loftor.com/&quot;&gt;loftor’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jser.me/2013/07/28/%E6%97%A7blog%E8%BF%81%E7%A7%BB%E5%88%B0jekyll+github.html&quot;&gt;旧blog迁移到jekyll+github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://Adominick.github.io/%E9%94%A4%E7%82%BC%E6%8A%80%E8%83%BD/</link>
                <guid>http://Adominick.github.io/</guid>
                <pubDate>2014-12-26T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it. 
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it &lt;!-- more --&gt;does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://Adominick.github.io/lessons/jekyll-introduction</link>
                <guid>http://Adominick.github.io/lessons/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
